#!/usr/bin/python

# Copyright 2009 Konrad Siek

import os
import time
import fcntl
import signal
import base64
import getpass
import simplejson
import urllib, urllib2

from threading import Thread

# Program info
PROGRAM_NAME = 'omg'

# Local filesystem constants
LOCAL_SERVICES_DIR = 'services/'
LOCAL_POST_DIR = 'post/'
LOCAL_GET_DIR = 'get/'

# Connection constants
KEY_AUTHORIZATION = 'Authorization'
KEY_BASIC = 'Basic'

# Standard (made-up) API keys
API_FRIENDS = 'friends'
API_PUBLIC = 'public'
API_UPDATE = 'update'

# JSON keys
JSON_ID = 'id'
JSON_USER = 'user'
JSON_NAME = 'name'
JSON_TEXT = 'text'
JSON_CREATED_AT = 'created_at'
JSON_SCREEN_NAME = 'screen_name'
JSON_STATUS = 'status'
JSON_SOURCE = 'source'
JSON_ADDRESS = 'address'
JSON_LOGIN = 'login'
JSON_PASSWORD = 'password'
JSON_API = 'api'
JSON_DELAY = 'delay'
JSON_SINCE_ID = 'since_id'

# Logging level constants
LOG_INFO = 'INFO'
LOG_WARNING = 'WARN'
LOG_ERROR = 'ERROR'

# Buffers
#post_buffer = {}
#get_buffer = {}

def log(string, type=LOG_INFO):
	#lock
	print '[%s]\t%s' % (type, string)
	#unlock

# File I/O
def get_messages(directory, name):
	path = os.path.join(directory, name)
	try:
		file = open(path, 'r')
		string = file.read()
		file.close()
		if string.strip() != '':
			result = simplejson.loads(string)
			log('File %s contains %d entries' % (path, len(result)))
			return result
		else:
			log('File %s was empty' % path)
			return []
	except:
		log('File %s could not be read' % path, LOG_WARNING)
		return []

def get_last_id(messages):
	max = 1
	for message in messages:
		if max < message[JSON_ID]:
			max = message[JSON_ID]
	return max

# File I/O
def get_last_id_from_file(directory, name):
	messages = get_messages(directory, name)
	return get_last_id(messages)

# File I/O
def write_messages(directory, name, json):
	path = os.path.join(directory, name)
	file = open(path, 'w')
	file.write(simplejson.dumps(json))
	file.close()

def update_messages(directory, name, json, last_id):
	if len(json) == 0:
		return last_id
	# consider read buffer
	old_json = get_messages(directory, name)
	new_json = json + old_json
	# consider write buffer
	write_messages(directory, name, new_json)
	return get_last_id(new_json)

# File I/O
def load_services(directory, credentials={}):
	services = []
	paths = os.listdir(directory)
	for path in paths:
		if path.endswith('~'):
			log('Omitting service configuration: %s' % path)
			continue
			
		log('Loading service configuration: %s' % path)
		file = open(os.path.join(directory, path), 'r')
		string = file.read()
		file.close()
		
		json = simplejson.loads(string)
		name = json[JSON_NAME];
		address = json[JSON_ADDRESS];
		login = json[JSON_LOGIN];
		password = json[JSON_PASSWORD];
		api = json[JSON_API];
		delay = json[JSON_DELAY];

		id = get_last_id_from_file(LOCAL_GET_DIR, name)

		if name in credentials:
			login, password = credentials[service]
		
		while password == '':
			password = getpass.getpass("%s password:" % name)
		
		service = Service(name, address, login, password, api, delay, id, update_messages)
		services.append(service)
		
	return services

# File I/O
def load_updates(directory, name):
	path = os.path.join(directory, name)
	try:
		file = open(path, 'r')
		lines = file.readlines()
		file.close()	
		os.remove(path)
		log('Loaded %d updates from file %s' % (len(lines), path))
		return lines
	except:
		log('File %s could not be loaded' % path)
		return []

def update_services(directory, services):
	for service in services:
		# consider buffer
		updates = load_updates(directory, service.name)
		for status in updates:
			status = status.rstrip()
			service.update(status) # Arguments?

class Service (Thread):
	def __init__(self, name, url, login, password, api, delay, id, handler):
		Thread.__init__(self)
		self.name = name
		self.api = api
		self.address = url
		self.delay = delay
		self.authorization_information = "%s:%s" % (login, password)
		self.last_id = id
		self.store = handler
		
	def get_authorization_information(self):
		authorization = base64.encodestring(self.authorization_information)
		return "%s %s" % (KEY_BASIC, authorization.strip())			
		
	def request(self, api_key, arguments = '', data = None):
		address = "%s/%s?%s" % (self.address, self.api[api_key], arguments)
		log('Sending %s request: %s' % (self.name, address))
		try:	
			header = {KEY_AUTHORIZATION: self.get_authorization_information()}
			request = urllib2.Request(address, data, header)
			connection = urllib2.urlopen(request)
			result = simplejson.loads(connection.read())
			log('Loaded %d entries from %s' % (len(result), address))
			return result
		except:
			log('Could not access %s' % address, LOG_WARNING)
			return []
		
	def update(self, status, arguments = ''):
		json_data = {
			JSON_STATUS: status,
			JSON_SOURCE: PROGRAM_NAME,
		}
		log('Updating %s status: %s (source: %s)' % (self.name, status, PROGRAM_NAME))
		data = urllib.urlencode(json_data)
		return self.request(API_UPDATE, arguments, data) 

	def run(self):
		while True:
			since_id = self.api[JSON_SINCE_ID] % self.last_id
			address = API_FRIENDS
			log('Requesting %s resource: %s (since ID: %s)' % (self.name, address, since_id))
			messages = self.request(address, since_id)
			last_id = self.store(LOCAL_GET_DIR, self.name, messages, self.last_id)
			time.sleep(self.delay)
			self.last_id = last_id

def observe(handler):
	signal.signal(signal.SIGIO, handler)
	file = os.open(LOCAL_POST_DIR,  os.O_RDONLY)
	mask = fcntl.DN_MODIFY | fcntl.DN_MULTISHOT
	fcntl.fcntl(file, fcntl.F_SETSIG, 0)
	fcntl.fcntl(file, fcntl.F_NOTIFY, mask)

# Start service threads.
if __name__ == '__main__':
	log('Loading services')
	services = load_services(LOCAL_SERVICES_DIR)
	
	log('Starting services')
	for service in services:
		service.start()

	def handle(signum, frame):
		"""React to a change in the posting directory -- send updates"""	
		#lock
		#try:
		log('A change occured in directory %s' % LOCAL_POST_DIR)
		time.sleep(10)
		log('Update services')
		update_services(LOCAL_POST_DIR, services)
		#unlock
		#except:
		#unlock

	log('Update services')
	update_services(LOCAL_POST_DIR, services)
	
	log('Start monitoring directories')
	observe(handle)

	# Hang up.
	while True:
		time.sleep(240)
		
	#for service in services:
	#	service.join()
